{"meta":{"title":"Troy's Blog","subtitle":"Make Shit Happen","description":"This is troy's personal blog, record all the points during work.","author":"Troy Young","url":"http://sgyyz.github.io"},"pages":[],"posts":[{"title":"Java编码标准","slug":"java-code-standard","date":"2017-03-13T13:09:10.751Z","updated":"2017-03-12T14:42:03.000Z","comments":true,"path":"2017/03/13/java-code-standard/","link":"","permalink":"http://sgyyz.github.io/2017/03/13/java-code-standard/","excerpt":"","text":"写出好的代码、规范的代码，有益身心健康。 1. 文件、类、变量、方法命名要规范。 文件、类：首字母大写，单词首字母大写。如：UserController.java, UserService.java等。 变量、方法：首字母小写，之后单词首字母大写。如： 1234private Integer userId;private OnlineCourse onlineCourse;private User findUserById(Integer Id);private List&lt;OnlineCourse&gt; queryOnlineCourse4CurrentStudent(); 注意：命名一定要规范，同时命名一定要有意义，能表达出具体的意思。这样做可以减少写注释的工作。 2. 代码注释。 代码注释需要在必要的地方用文字描述该段代码的逻辑，以方便后续维护时使用。12345678910private OnlineCourse onlineCourse;// 学生所选课程public List&lt;OnlineCourse&gt; queryOnlineCourse4CurrentStudent() &#123; // 获取当前用户 User user = UserUtil.getCurrentUser(); List&lt;OnlineCourse&gt; onlineCourses = onlineCourseDAO.queryByCondition(user.getId()); // ....... (处理逻辑) // 返回查询出学生所选课程的结果集 return onlineCourse;&#125; 3. 代码模块化单一原则：一个类、一个方法尽量只用处理一个功能，不要和其他的功能有耦合。即该类、方法属于高内聚，低耦合。这样做能达到模块最小化，方便后续的维护，或者其他系统的调用。UserDAO.java123public User findByUserId(Integer id) &#123; return userDAO.find(id);&#125; UserService.java1234567891011/** * 处理User信息。 * * 查询用户是否存在系统中。 * @Param Integer id 用户id * @Param boolean isExist 用户是否存在 */public boolean isUserExist(Integer id) &#123; boolean isExist = faslse; isExist = userDAO.findByUserId(id); // ...... 可能会有一些其他的处理，所以这里用一个临时变量来存储该boolean值。 return isExist;&#125; UserController.java1234567891011121314/** * 创建用户 * * @Param User user 用户信息 * @Param ModelAndView view 返回视图 */public ModelAndView createUser(User user) &#123; // ....... 验证用户的输入 // 判断用户是否存在 boolean isExist = userService.isUserExist(user.getId()); if(isExist) &#123; // 用户存在，返回视图，显示错误信息 view.addObject('isExist', true); return view; &#125;&#125; 4. 其他 编写代码时，思路一定要清晰，不要把所有逻辑都写在一个地方，这样对于代码的扩展以及维护是很麻烦的。 空格，缩进一定要规范。避免大家格式不一样，每次代码更新和合并的时候出现太多的冲突。参考建议 - 每一行代码不要写的太多，标准规定是80个字符一行。根据实际情况来进行调整。 空一行。空一行也是为增加代码的可读性。如上面的代码，在方法内部也有空一行，来区分出代码的逻辑。","raw":null,"content":null,"categories":[{"name":"Java","slug":"Java","permalink":"http://sgyyz.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://sgyyz.github.io/tags/Java/"},{"name":"Code","slug":"Code","permalink":"http://sgyyz.github.io/tags/Code/"}]}]}